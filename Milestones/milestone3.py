# -*- coding: utf-8 -*-
"""Milestone3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcceAtuKa9EjvoOmQjIQpVI8hCpSpyed

# ERP system implement

## using API
"""

import requests
import pandas as pd

ERP_API_URL = ""
API_KEY = ""

data = pd.read_csv("tomato_supply_chain_with_risk.csv")

# Function to send updates to ERP system
def update_erp_inventory(row):
    try:
        # Define API endpoint for stock adjustments
        endpoint = f"{ERP_API_URL}/update_stock"
        headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}

        # Prepare payload
        payload = {
            "date": row['Date'],
            "region": row['Region'],
            "country": row['Country'],
            "supplier": row['Supplier'],
            "inventory_level": row['Inventory Level'],
            "risk_score": row['Risk Confidence'],
            "sentiment_score": row['Sentiment Score'],
            "recommended_action": "increase_stock" if row['Risk Confidence'] > 0.8 else "maintain_stock"
        }

        # Make POST request to ERP API
        response = requests.post(endpoint, json=payload, headers=headers)
        if response.status_code == 200:
            print(f"Successfully updated inventory for supplier: {row['Supplier']}")
        else:
            print(f"Failed to update inventory for supplier: {row['Supplier']} - {response.text}")
    except Exception as e:
        print(f"Error updating ERP inventory: {e}")

# Iterate through dataset and update ERP system
for _, row in data.iterrows():
    update_erp_inventory(row)

"""Fail to Fetch free api URL and api Key.
## GitHub Clone
"""

!git clone https://github.com/nishant0820/Inventory-Management-System.git

# Commented out IPython magic to ensure Python compatibility.
# %cd Inventory-Management-System

ls

!python dashboard.py

"""Doesn't support Tkinter
## install virtual display
"""

!apt-get install -y xvfb
!pip install pyvirtualdisplay

from pyvirtualdisplay import Display

display = Display(visible=0, size=(800, 600))
display.start()

"""## Install requirment for cloning code"""

!pip install bill

from PIL import Image
import glob

def load_images_from_folder(folder_path):
  """
  Loads all .jpg images from the specified folder.

  Args:
    folder_path: Path to the folder containing the images.

  Returns:
    A list of PIL Image objects.
  """
  images = []
  for filename in glob.glob(f"{folder_path}/*.jpg"):
    try:
      img = Image.open(filename)
      images.append(img)
    except IOError:
      print(f"Error loading image: {filename}")
  return images

# Example usage:
image_folder = "/content/Inventory-Management-System/images"  # Replace with the actual path
image_list = load_images_from_folder(image_folder)

!python create_db.py

!python dashboard.py

"""## Main code"""

import pandas as pd

def analyze_supply_chain_data(file_path):
    data = pd.read_csv(file_path)

    # Define thresholds and conditions
    warehouse_capacity_threshold = 0.8  # 80% capacity considered high
    risk_score_threshold = 9.0  # Risk Score above 9 is considered high
    sentiment_score_threshold = 6.0  # Sentiment Score below 6 is considered negative
    alerts = []

    for index, row in data.iterrows():
        # Calculate warehouse utilization
        utilization = row['Inventory'] / 10000  # Assuming max capacity is 10,000 units for all regions

        # Analyze risk factors and sentiment
        if utilization > warehouse_capacity_threshold or row['Risk Confidence'] > risk_score_threshold:
            if row['Sentiment Score'] < sentiment_score_threshold:
                alerts.append((row['Date'], "SELL", f"High utilization ({utilization:.2f}), Risk Score {row['Risk Confidence']}, Negative sentiment (Score: {row['Sentiment Score']})"))
            else:
                alerts.append((row['Date'], "MONITOR", f"High utilization ({utilization:.2f}) with Risk Score {row['Risk Score']}"))
        elif utilization < 0.4:  # If utilization is very low
            alerts.append((row['Date'], "BUY", f"Low utilization ({utilization:.2f}), consider increasing stock"))

    return alerts

file_path = "/content/tomato_supply_chain_analysis_sentiment_and_risk.csv"

# Analyze the supply chain data
alerts = analyze_supply_chain_data(file_path)

# Display alerts
for alert in alerts:
    print(f"Date: {alert[0]}, Action: {alert[1]}, Reason: {alert[2]}")

# Convert alerts to a DataFrame and save to a CSV file
alerts_df = pd.DataFrame(alerts)
output_file = "supply_chain_alerts.csv"
alerts_df.to_csv(output_file, index=False)

print(f"Alerts have been saved to '{output_file}'.")

