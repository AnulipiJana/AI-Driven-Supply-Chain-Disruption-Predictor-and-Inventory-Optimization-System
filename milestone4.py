# -*- coding: utf-8 -*-
"""Milestone4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Sx8dMSeFkdabnS3f_032u1W2Bqpptg4

# Send alert message via email and slack
"""

! pip install pandas sklearn smtplib

"""## Try to send Alert message in Email"""

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# 1. Train the Model
def train_model(data_path):
    data = pd.read_csv(data_path)

    # Map target variable to numeric
    data['Action'] = data['Action'].map({'SELL': 0, 'MONITOR': 1, 'BUY': 2})

    # Select features and target
    X = data[['Utilization', 'Risk Score', 'Sentiment Score']]
    y = data['Action']

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train model
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Evaluate model
    y_pred = model.predict(X_test)
    print("Model Trained. Evaluation:\n", classification_report(y_test, y_pred))

    return model

# 2. Predict Action
def predict_action(model, utilization, risk_score, sentiment_score):
    new_input = pd.DataFrame({
        'Utilization': [utilization],
        'Risk Score': [risk_score],
        'Sentiment Score': [sentiment_score]
    })
    prediction = model.predict(new_input)
    action_map = {0: 'SELL', 1: 'MONITOR', 2: 'BUY'}
    return action_map[prediction[0]]

# 3. Send Email Alert
def send_email_alert(recipient_email, subject, body):
    sender_email = "janabithika1976@gmail.com"
    sender_password = "******"

    # Set up email
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email
    message['Subject'] = subject

    # Add body
    message.attach(MIMEText(body, 'plain'))

    # Send email
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(message)
            print(f"Alert sent to {recipient_email}")
    except Exception as e:
        print(f"Error sending email: {e}")

# Main function to integrate everything
def main():
    # Train the model
    model = train_model("supply_chain_alerts.csv")

    # User input
    print("Enter Supply Chain Data:")
    utilization = float(input("Utilization (e.g., 0.85 for 85%): "))
    risk_score = float(input("Risk Score (0-10): "))
    sentiment_score = float(input("Sentiment Score (0-10): "))
    recipient_email = input("Recipient Email for Alert: ")

    # Predict action
    action = predict_action(model, utilization, risk_score, sentiment_score)
    alert_subject = f"Supply Chain Alert: Recommended Action - {action}"
    alert_body = f"Action: {action}\nDetails:\nUtilization: {utilization}\nRisk Score: {risk_score}\nSentiment Score: {sentiment_score}"

    # Send email alert
    send_email_alert(recipient_email, alert_subject, alert_body)

if __name__ == "__main__":
    main()

"""## Try to send Alert message in Slack"""

import requests

# Function to send Slack alert
def send_slack_alert(webhook_url, alert_subject, alert_body):
    payload = {
        "text": f"*{alert_subject}*\n{alert_body}"
    }
    try:
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 200:
            print("Alert sent to Slack successfully!")
        else:
            print(f"Failed to send alert to Slack: {response.status_code}")
    except Exception as e:
        print(f"Error sending alert to Slack: {e}")

# Example usage in the main function
if __name__ == "__main__":
    slack_webhook_url = "https://hooks.slack.com/services/your/webhook/tomatosupplyc-ykw5461"

    # Example alert
    alert_subject = "Supply Chain Alert: Recommended Action - BUY"
    alert_body = (
        "Action: BUY\n"
        "Details:\n"
        "Inventory: 5000\n"
        "Lead Time: 7\n"
        "Transport Status: Delayed\n"
        "News Sentiment: Severe disruptions in logistics.\n"
        "Weather Condition: Heavy rainfall.\n"
        "Utilization: 0.50\n"
        "Sentiment: Negative (Score: 0.78)\n"
        "Risk: High (Score: 0.85)"
    )
    send_slack_alert(slack_webhook_url, alert_subject, alert_body)

"""## Though its print successful but not send in slack: Check slack"""

import requests

webhook_url = "http://tomatosupplyc-ykw5461.slack.com/"
message = {"text": "Hello! This is a test message from the Webhook."}

response = requests.post(webhook_url, json=message)
print(response.status_code, response.text)

"""# Main

## Working Alert send Slack
Input:
- Utilization
- Risk Factor
- Sentiment Factor
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from slack_sdk.webhook import WebhookClient

# Load pre-trained model
def train_model():
    # Load the dataset
    data = pd.read_csv("supply_chain_alerts.csv")

    # Convert categorical target variable into numeric
    data['Action'] = data['Action'].map({'SELL': 0, 'MONITOR': 1, 'BUY': 2})

    # Select features and target
    X = data[['Utilization', 'Risk Score', 'Sentiment Score']]
    y = data['Action']

    # Train the Random Forest model
    model = RandomForestClassifier(random_state=42)
    model.fit(X, y)
    return model

# Initialize Slack Webhook
slack_webhook_url = "https://hooks.slack.com/services/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"
slack_client = WebhookClient(slack_webhook_url)

# Function to send Slack alert
def send_slack_alert(action, message):
    actions = {
        "SELL": ":warning: *SELL Alert!*",
        "MONITOR": ":mag: *Monitor Alert!*",
        "BUY": ":shopping_cart: *BUY Alert!*"
    }
    slack_message = f"{actions[action]}\n{message}"
    response = slack_client.send(text=slack_message)
    if response.status_code == 200:
        print("Slack alert sent successfully!")
    else:
        print("Failed to send Slack alert.")

# Main Function to process input and send alerts
def main():
    # Train or load the model
    model = train_model()

    # User input
    user_input = {
        'Utilization': float(input("Enter Utilization (e.g., 0.85): ")),
        'Risk Score': float(input("Enter Risk Score (e.g., 9.5): ")),
        'Sentiment Score': float(input("Enter Sentiment Score (e.g., 5.0): "))
    }

    # Convert input to DataFrame for prediction
    new_input = pd.DataFrame([user_input])

    # Predict action
    prediction = model.predict(new_input)[0]
    action_map = {0: 'SELL', 1: 'MONITOR', 2: 'BUY'}
    action = action_map[prediction]

    # Prepare alert message
    alert_message = f"Predicted Action: {action}\nDetails:\n- Utilization: {user_input['Utilization']}\n" \
                    f"- Risk Score: {user_input['Risk Score']}\n- Sentiment Score: {user_input['Sentiment Score']}"

    # Send alert via Slack
    send_slack_alert(action, alert_message)

if __name__ == "__main__":
    main()

"""## Final Alert send Slack
Input:
- Inventory
- Lead Time (days)
- Transport Status
- News Sentiment
- Weather Conditio
- Slack Incoming Webhook URL
"""

import requests
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from transformers import pipeline

# 1. Initialize Sentiment and Risk Models
def initialize_sentiment_model():
    return pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")

def initialize_risk_model():
    return pipeline("text-classification", model="facebook/bart-large-mnli")

# 2. Calculate Risk Score, Sentiment Score, and Utilization
def analyze_data(inventory, lead_time, transport_status, news_sentiment, weather_condition, sentiment_model, risk_model):
    # Calculate utilization
    utilization = inventory / 10000  # Assuming max capacity is 10,000 units for all regions

    # Sentiment Analysis
    sentiment_result = sentiment_model(news_sentiment)
    sentiment_label = sentiment_result[0]['label']
    sentiment_score = sentiment_result[0]['score']

    # Risk Analysis
    risk_context = f"News: {news_sentiment}. Transport Status: {transport_status}. Weather: {weather_condition}. Inventory: {inventory}. Lead Time: {lead_time}."
    risk_result = risk_model(risk_context)
    risk_label = risk_result[0]['label']
    risk_score = risk_result[0]['score']

    return utilization, sentiment_label, sentiment_score, risk_label, risk_score

# 3. Train the Model
def train_model(data_path):
    data = pd.read_csv(data_path)

    # Map target variable to numeric
    data['Action'] = data['Action'].map({'SELL': 0, 'MONITOR': 1, 'BUY': 2})

    # Select features and target
    X = data[['Utilization', 'Risk Score', 'Sentiment Score']]
    y = data['Action']

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train model
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Evaluate model
    y_pred = model.predict(X_test)
    print("Model Trained. Evaluation:\n", classification_report(y_test, y_pred))

    return model

# 4. Predict Action
def predict_action(model, utilization, risk_score, sentiment_score):
    new_input = pd.DataFrame({
        'Utilization': [utilization],
        'Risk Score': [risk_score],
        'Sentiment Score': [sentiment_score]
    })
    prediction = model.predict(new_input)
    action_map = {0: 'SELL', 1: 'MONITOR', 2: 'BUY'}
    return action_map[prediction[0]]

# 5. Send Slack Alert
def send_slack_alert(webhook_url, message):
    payload = {
        "text": message
    }
    try:
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 200:
            print("Alert sent to Slack successfully.")
        else:
            print(f"Failed to send alert to Slack. Status Code: {response.status_code}, Response: {response.text}")
    except Exception as e:
        print(f"Error sending Slack alert: {e}")

# 6. Main Function to Integrate All Steps
def main():
    # Initialize sentiment and risk models
    sentiment_model = initialize_sentiment_model()
    risk_model = initialize_risk_model()

    # Train the action prediction model
    model = train_model("/content/supply_chain_alerts.csv")

    # User inputs
    print("Enter Supply Chain Data:")
    inventory = int(input("Inventory (e.g., 5000): "))
    lead_time = int(input("Lead Time (days): "))
    transport_status = input("Transport Status (e.g., Delayed, In Transit, Awaiting Dispatch): ")
    news_sentiment = input("News Sentiment (e.g., Tomato prices soar due to unexpected frost in the region.\nFarmers report higher yields thanks to favorable weather.\nDelays in transportation cause supply chain disruptions.\nGovernment announces subsidies for tomato farmers.\nPest infestation reduces tomato output in key regions.\nHeavy rainfall damages crops in major producing areas.\nDrought conditions lead to reduced tomato supply.\nImproved infrastructure reduces transportation delays.\nLabor shortages affect harvesting in rural areas.\nExport restrictions lead to surplus in local markets.): ")
    weather_condition = input("Weather Condition (e.g., Sunny and favorable for farming.\nHeavy rainfall causing waterlogging\nDrought leading to crop failure.\nMild rainfall aiding crop growth.\nUnexpected frost damaging crops,\nHigh humidity increasing pest risks,\nStrong winds causing crop damage): ")

    # Slack Webhook URL
    webhook_url = input("Enter your Slack Incoming Webhook URL: ")

    # Analyze data
    utilization, sentiment_label, sentiment_score, risk_label, risk_score = analyze_data(
        inventory, lead_time, transport_status, news_sentiment, weather_condition, sentiment_model, risk_model
    )

    # Predict action
    action = predict_action(model, utilization, risk_score, sentiment_score)

    # Create Slack message content
    alert_message = (
        f"*Supply Chain Alert: Recommended Action - {action}*\n"
        f"Utilization: {utilization}\n"
        f"Risk Score: {risk_score}\n"
        f"Sentiment Score: {sentiment_score}\n"
        f"\n*Details:*\n"
        f"- *Inventory:* {inventory}\n"
        f"- *Lead Time:* {lead_time}\n"
        f"- *Transport Status:* {transport_status}\n"
        f"- *News Sentiment:* {news_sentiment}\n"
        f"- *Weather Condition:* {weather_condition}\n"
        f"- *Utilization:* {utilization:.2f}\n"
        f"- *Sentiment:* {sentiment_label} (Score: {sentiment_score:.2f})\n"
        f"- *Risk:* {risk_label} (Score: {risk_score:.2f})"
    )

    # Send Slack alert
    send_slack_alert(webhook_url, alert_message)

if __name__ == "__main__":
    main()

