# -*- coding: utf-8 -*-
"""INFOSYS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HY7vDYjfRVN_yHj3IE85wcp4DDN9HZup

# New Section

**Version Check**
"""

!python --version

import numpy
import pandas
import matplotlib
import tensorflow
import torch

print("NumPy version:", numpy.__version__)
print("Pandas version:", pandas.__version__)
print("Matplotlib version:", matplotlib.__version__)
print("TensorFlow version:", tensorflow.__version__)
print("PyTorch version:", torch.__version__)

!pip list

"""#Fetch information about supply using API URL & API KEY
### Sample code to get idea about API using public api
"""

import requests

# API endpoint
api_url = "https://official-joke-api.appspot.com/random_joke"

try:
    # Send a GET request to the API
    response = requests.get(api_url)

    # used to check if the HTTP request to the API was successful.
    if response.status_code == 200:
        joke = response.json()  # Parse JSON response
        print(f"Joke: {joke['setup']}")
        print(f"Punchline: {joke['punchline']}")
    else:
        print(f"Failed to fetch joke. Status code: {response.status_code}")
except Exception as e:
    print(f"An error occurred: {e}")

"""# Logistics Performance Index (LPI)
disable to get the api key but its work as the api_url is public
"""

import requests

# API URL for LPI data
api_url = "https://api.worldbank.org/v2/country/all/indicator/LP.LPI.OVRL.XQ?format=json"

try:
    response = requests.get(api_url) # Make a GET reques

    if response.status_code == 200:
        data = response.json()

        if len(data) > 1:
            lpi_data = data[1]  # Second element contains actual data
            print("Logistics Performance Index (LPI):")
            for record in lpi_data[:10]:
                print(f"Country: {record['country']['value']}, Year: {record['date']}, Score: {record['value']}")
        else:
            print("No data found.")
    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")

except Exception as e:
    print(f"An error occurred: {e}")

"""#**MarineTraffic**"""

import requests

# Replace with your MarineTraffic API Key
api_key = "AIzaSyDCQ1-AUH3C6xU5GGAHxY9QvL_kRZ-OHUY"
api_url = f"https://services.marinetraffic.com/api/exportvesseltrack/v:2/{api_key}/timespan:60/mmsi:636092654/protocol:jsono"

try:
    response = requests.get(api_url)

    if response.status_code == 401:
        data = response.json()

        print("Vessel Tracking Data:")
        for vessel in data.get('vessels', []):
            print(f"Vessel Name: {vessel['SHIPNAME']}, Latitude: {vessel['LAT']}, Longitude: {vessel['LON']}")
    else:
        print(f"Failed to fetch vessel data. Status code: {response.status_code}")

except Exception as e:
    print(f"An error occurred: {e}")

"""## Economic Indicators Using World Bank **API**"""

import requests

api_url = "http://api.worldbank.org/v2/country/all/indicator/LP.LPI.OVRL.XQ?format=json"

try:
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        print("Country \t\t LPI Score")
        for country_data in data[1][:10]:  # First 10 results
            print(f"{country_data['country']['value']} ,{country_data['value']}\n")
    else:
        print(f"Failed to fetch LPI data. Status code: {response.status_code}")
except Exception as e:
    print(f"An error occurred: {e}")

import requests
import pandas as pd

API_KEY = "f77ec218c74644348641d36d500f126a"
API_URL = "https://newsapi.org/v2/everything"

# Function to fetch news
def news_fetch(query="supply chain", page_size=20, language="en"):
    parameters = {
        "q": query,
        "pageSize": page_size,  # Number of articles per request
        "language": language,
        "apiKey": API_KEY,
    }
    response = requests.get(API_URL, params=parameters) #Sends a GET request to the NewsAPI with the specified parameters
    if response.status_code == 200:
        articles = response.json().get("articles", [])
        return articles
    else:
        print(f"Error: {response.status_code}")
        return []

# Main function
if __name__ == "__main__":
    # Fetch news articles
    articles = news_fetch()
    if articles:
        print("SUCCESSFUL !\n")

        # Collect relevant fields and create a DataFrame
        news_data = [
            {
                "Title": article["title"],
                "Description": article["description"],
                "Source": article["source"]["name"],
                "URL": article["url"],
            }
            for article in articles
        ]
        news_df = pd.DataFrame(news_data)

        news_df.to_csv("supply_chain_news.csv", index=True) # Save to CSV

        # Print in the requested format (Row {idx + 1}: Title, Description, Source, URL)
        print("\nArticle Information:")
        for idx, row in news_df.iterrows():
            print(f"Row {idx + 1}:")
            print(f"Title: {row['Title']}")
            print(f"Description: {row['Description']}")
            print(f"Source: {row['Source']}")
            print(f"URL: {row['URL']}")
            print("\n")
    else:
        print("No articles found.")

